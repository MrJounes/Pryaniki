//
//  MainViewController.swift
//  PryanikyTest
//
//  Created by Игорь Дикань on 04.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func display(_ viewModel: ViewModel)
}

final class MainViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - External vars
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: - Internal vars
    private var blocks: [String] = []
    private var data: [DataModelProtocol] = []

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        MainConfigurator.shared.configure(self)
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        MainConfigurator.shared.configure(self)
    }
  
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    // MARK: - IBActions
}

// MARK: - Display logic
extension MainViewController: MainDisplayLogic {
    
    func display(_ viewModel: ViewModel) {
        blocks = viewModel.view
        data = viewModel.data
        tableView.reloadData()
        let _ = ViewModel(view: ["hz", "selector", "picture", "hz"],
                          data: [TextBlockModel(name: "hz",
                                                text: "Текстовый блок"),
                                 PictureBlockModel(name: "picture",
                                                   urlString: "https://pryaniky.com/static/img/logo-a-512.png"),
                                 SelectorBlockModel(name: "selector",
                                                    selectedId: 1,
                                                    variants: [VariantModel(id: 1, text: "Вариант раз"),
                                                               VariantModel(id: 2, text: "Вариант два"),
                                                               VariantModel(id: 3, text: "Вариант три")])])
    }
}

// MARK: - TableView Data Sourse
extension MainViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return blocks.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let block = blocks[indexPath.row]
        if block == "hz" {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: TextCell.reuseId, for: indexPath) as? TextCell else {
                return UITableViewCell()
            }
            cell.setupCell(with: data[0] as! TextBlockModel)
            return cell
        } else if block == "picture" {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: PictureCell.reuseId, for: indexPath) as? PictureCell else {
                return UITableViewCell()
            }
            cell.setupCell(with: data[1] as! PictureBlockModel)
            return cell
        } else if block == "selector" {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: SelectorCell.reuseId, for: indexPath) as? SelectorCell else {
                return UITableViewCell()
            }
            cell.setupCell(with: data[2] as! SelectorBlockModel)
            return cell
        } else {
            return UITableViewCell()
        }
    }
}

// MARK: - TableView Delegate
extension MainViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        print("Id: \(indexPath.row) - name: \(blocks[indexPath.row])")
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if blocks[indexPath.row] == "picture" {
            return 100
        } else {
            return tableView.estimatedRowHeight
        }
    }
}

// MARK: - Private methods
private extension MainViewController {
    
    func setupView() {
        interactor?.fetchData()
        configureTableView()
    }
    
    func configureTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: TextCell.nibName, bundle: nil), forCellReuseIdentifier: TextCell.reuseId)
        tableView.register(UINib(nibName: PictureCell.nibName, bundle: nil), forCellReuseIdentifier: PictureCell.reuseId)
        tableView.register(UINib(nibName: SelectorCell.nibName, bundle: nil), forCellReuseIdentifier: SelectorCell.reuseId)
        tableView.tableFooterView = UIView(frame: .zero)
        //tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
    }
}
