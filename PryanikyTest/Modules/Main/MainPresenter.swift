//
//  MainPresenter.swift
//  PryanikyTest
//
//  Created by Игорь Дикань on 04.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainPresentationLogic {
    func present(_ response: ListDataResponse)
}

final class MainPresenter {
    
    // MARK: - External vars
    weak var viewController: MainDisplayLogic?
}

// MARK: - Presentation logic
extension MainPresenter: MainPresentationLogic {
    
    func present(_ response: ListDataResponse) {
        let view = response.view
        var data = [DataModelProtocol]()
        
        let _ = response.data.map { (object) in
            let name = object.name
            if name == "hz" {
                let item = TextBlockModel(name: object.name,
                                          text: object.data.text ?? "")
                data.append(item)
            } else if name == "picture" {
                let item = PictureBlockModel(name: object.name,
                                             urlString: object.data.url ?? "")
                data.append(item)
            } else if name == "selector" {
                
                let variants = object.data.variants?.map({ (variant) -> VariantModel in
                    let item = VariantModel(id: variant.id,
                                            text: variant.text)
                    return item
                })
                let defaultValue = [VariantModel(id: 0, text: "")]
                
                let item = SelectorBlockModel(name: object.name,
                                              selectedId: object.data.selectedId ?? 0,
                                              variants: variants ?? defaultValue)
                data.append(item)
            } else {
                
            }
        }
        
        let viewModel = ViewModel(view: view, data: data)
        viewController?.display(viewModel)
    }
}
